create database EjEntrega

use EjEntrega
go

create table PERSONAL_MEDICO(
ID_MEDICOS INT NOT NULL PRIMARY KEY(ID_MEDICOS) CHECK (ID_MEDICOS BETWEEN 0 AND 9999),
NOMBRE CHAR(30) NOT NULL,
PROFESION VARCHAR(30) NOT NULL CHECK(PROFESION IN('medico general','medico especialista','enfermera')),
GENERO CHAR NOT NULL CHECK (GENERO IN('M','F','N')),
FECHA_IN DATE NOT NULL)


create table PACIENTES(
ID_PACIENTE INT check(id_paciente > = 0 and id_paciente <= 9999 ) NOT NULL,
NOMBRE CHAR(30) NOT NULL,
EDAD INT CHECK(EDAD <= 100) NOT NULL,
NSS VARCHAR(40) UNIQUE NOT NULL,
DIRECCION VARCHAR(40) NOT NULL,
TELEFONO INT CHECK(TELEFONO <=10) NOT NULL,
TELEFONO_CELULAR INT,
EMAIL VARCHAR(40),
GENERO CHAR(1) CHECK (GENERO IN('M','F','N'))
CONSTRAINT PK_ID_PACIENTE PRIMARY KEY (ID_PACIENTE)
);


CREATE TABLE CONSULTA(
ID_MEDICOS INT NOT NULL,
ID_PACIENTE INT NOT NULL,
FECHA DATE NOT NULL,
COMENTARIOS VARCHAR(100),
ID_CONSULTA INT PRIMARY KEY NOT NULL,
CONSTRAINT FK_ID_PACIENTE FOREIGN KEY (ID_PACIENTE) REFERENCES PACIENTES (ID_PACIENTE),
CONSTRAINT FK_ID_MEDICOS FOREIGN KEY (ID_MEDICOS) REFERENCES PERSONAL_MEDICO (ID_MEDICOS)
);

CREATE TABLE RECETA (
ID_CONSULTA INT NOT NULL,
MARCA VARCHAR (100) NOT NULL,
COMENTARIOS VARCHAR(100),
FECHA_RECETA DATE NOT NULL,
CONSTRAINT FK_IDCONSULTA FOREIGN KEY (ID_CONSULTA) REFERENCES CONSULTA (ID_CONSULTA)
);

CREATE PROCEDURE RELLENAR_MEDICOS
@ID_MEDICO INT, @NOMBRE VARCHAR(30)='%',@PROFESION VARCHAR(30)='%',@GENERO CHAR='%',@FECHA_IN DATE AS
INSERT INTO PERSONAL_MEDICO VALUES (@ID_MEDICO,@NOMBRE,@PROFESION,@GENERO,@FECHA_IN) 

EXEC RELLENAR_MEDICOS 1,'MARTIN','MEDICO GENERAL','M','2002-09-30'
EXEC RELLENAR_MEDICOS 2,'JULI','MEDICO ESPECIALISTA','F','2003-10-30'
EXEC RELLENAR_MEDICOS 3,'NANI','ENFERMERA','N','2004-08-30'
EXEC RELLENAR_MEDICOS 4,'NICOLE','MEDICO GENERAL','F','2005-03-30'
EXEC RELLENAR_MEDICOS 5,'RENA','MEDICO ESPECIALISTA','F','2006-04-30'
EXEC RELLENAR_MEDICOS 6,'ALBERTO','MEDICO GENERAL','M','2002-09-30'
EXEC RELLENAR_MEDICOS 7,'FACU','MEDICO ESPECIALISTA','M','2003-10-30'
EXEC RELLENAR_MEDICOS 8,'TOMY','ENFERMERA','M','2004-08-30'
EXEC RELLENAR_MEDICOS 9,'HILEL','MEDICO GENERAL','N','2005-03-30'
EXEC RELLENAR_MEDICOS 10,'CLAUDIO','MEDICO ESPECIALISTA','M','2006-04-30'

SELECT * FROM PERSONAL_MEDICO

CREATE PROCEDURE RELLENAR_PACIENTES
@ID_PACIENTE INT,
@NOMBRE VARCHAR(30),
@EDAD INT,
@NSS VARCHAR(40),
@DIRECCION VARCHAR(40),
@TELEFONO INT,
@TELEFONO_CELULAR INT,
@EMAIL VARCHAR(40),
@GENERO CHAR(1)
AS
INSERT INTO PACIENTES VALUES (@ID_PACIENTE,@NOMBRE,@EDAD,@NSS,@DIRECCION,@TELEFONO,@TELEFONO_CELULAR,@EMAIL,@GENERO)

EXEC RELLENAR_PACIENTES 1,'Maria',20,'ADJFUF123','La pampa 123',36938596,11348573,'Maria@gmail.com','F'
EXEC RELLENAR_PACIENTES 2,'PABLO',30,'AJF743','RIACHIELO 23',7893272,8927238,'PABLO@GMAIL.COM','M'
EXEC RELLENAR_PACIENTES 3,'YAS',12,'ADJ34123','LIBERTADOR 38',3234,43211,'YAS@gmail.com','F'
EXEC RELLENAR_PACIENTES 4,'LAURA',29,'AD2423','FLORES 123',24443,43235,'LAURA@gmail.com','N'
EXEC RELLENAR_PACIENTES 5,'RAUL',10,'ADJ4123','JUJUY 123',36938596,11348573,'RAUL@gmail.com','M'
EXEC RELLENAR_PACIENTES 6,'JACINTA',30,'AJF435743','ALBERTI 23',7893272,8927238,'JACINTA@GMAIL.COM','F'
EXEC RELLENAR_PACIENTES 7,'LALI',12,'A4334123','SANJUAN 38',3234,43211,'LALI@gmail.com','F'
EXEC RELLENAR_PACIENTES 8,'CHRIS',29,'AD542423','BULNES 123',24443,43235,'CHRIS@gmail.com','N'
EXEC RELLENAR_PACIENTES 9,'SUSI',12,'ADJ3446123','FANJOSE 38',3234,43211,'SUSI@gmail.com','F'
EXEC RELLENAR_PACIENTES 10,'RANDOM',29,'AD242334','MAIPU 123',24443,43235,'RANDOM@gmail.com','N'
EXEC RELLENAR_PACIENTES 11,'JAVIER',20,'ADJFU3F123','La pampa 123',369385296,113428573,'JAVIER@gmail.com','N'
EXEC RELLENAR_PACIENTES 12,'Gabriela Sanchez',34,'ADJFU33F123','Lala 123',3695296,11343573,NULL,'F'

CREATE PROCEDURE RELLENAR_CONSULTA
@ID_MEDICOS INT, @ID_PACIENTE INT, @FECHA DATE, @COMENTARIOS VARCHAR(100)='%', @ID_CONSULTA INT AS
INSERT INTO CONSULTA VALUES(@ID_MEDICOS,@ID_PACIENTE,@FECHA,@COMENTARIOS,@ID_CONSULTA)

EXEC RELLENAR_CONSULTA 1,1,'2023-05-28','TOMAR OPTAMOX',1
EXEC RELLENAR_CONSULTA 2,2,'2023-05-27','TOMAR AGUA',2
EXEC RELLENAR_CONSULTA 3,3,'2023-05-26','TOMAR IBUPIRAC',3
EXEC RELLENAR_CONSULTA 4,4,'2023-05-25','TOMAR AGUA',4
EXEC RELLENAR_CONSULTA 5,1,'2023-05-20','TOMAR NADA',5
EXEC RELLENAR_CONSULTA 6,5,'2023-05-28','TOMAR OPTAMOX',6
EXEC RELLENAR_CONSULTA 7,6,'2023-05-27','TOMAR AGUA',7
EXEC RELLENAR_CONSULTA 8,7,'2023-05-26','TOMAR IBUPIRAC',8
EXEC RELLENAR_CONSULTA 9,8,'2023-05-25','TOMAR AGUA',9
EXEC RELLENAR_CONSULTA 10,9,'2023-05-20','TOMAR NADA',10
EXEC RELLENAR_CONSULTA 1,11,'2023-05-20','TOMAR NADA',11
EXEC RELLENAR_CONSULTA 1,11,'2002-05-20','TOMAR NADA',12


CREATE PROCEDURE RELLENAR_RECETA
@ID_CONSULTA INT, @MARCA VARCHAR(30)='%', @COMENTARIOS VARCHAR(100)='%', @FECHA_RECETA DATE AS
INSERT INTO RECETA VALUES(@ID_CONSULTA,@MARCA,@COMENTARIOS,@FECHA_RECETA)

EXEC RELLENAR_RECETA 1,'OPTI','TODOS LOS DIAS DOS VECES AL DIA','2023-05-28'
EXEC RELLENAR_RECETA 2,'VILLAVICENCIO','TODOS LOS DIAS','2023-05-27'
EXEC RELLENAR_RECETA 3,'IBU','TODOS LOS DIAS','2023-05-26'
EXEC RELLENAR_RECETA 4,'MANAOS','TODOS LOS DIAS','2023-05-25'
EXEC RELLENAR_RECETA 6,'OPTI','TODOS LOS DIAS DOS VECES AL DIA','2023-05-28'
EXEC RELLENAR_RECETA 6,'-','REPOSAR','2023-05-27'
EXEC RELLENAR_RECETA 7,'KIN','TODOS LOS DIAS','2023-05-26'
EXEC RELLENAR_RECETA 8,'IBU','TODOS LOS DIAS','2023-05-26'
EXEC RELLENAR_RECETA 9,'MANAOS','TODOS LOS DIAS','2023-05-25'
EXEC RELLENAR_RECETA 9,'-','REPOSO','2023-05-20'

/* 3. Crear todos los procedimientos almacenados necesarios que permitan actualizar los datos de médicos, pacientes, consultas y recetas según los parámetros que reciban, respetando las reglas de integridad definidas. */

/*ACTUALIZAR PERSONAL MEDICO*/
CREATE PROCEDURE ACTUALIZAR_MEDICO
@ID_MEDICO INT,
@NOMBRE VARCHAR(30)='%',
@PROFESION VARCHAR(100)='%',
@GENERO CHAR(1),
@FECHA_IN DATE
AS
UPDATE PERSONAL_MEDICO
SET NOMBRE = @NOMBRE,
    PROFESION = @PROFESION,
    GENERO = @GENERO,
    FECHA_IN = @FECHA_IN
WHERE ID_MEDICOS = @ID_MEDICO;

/*ACTUALIZAR PACIENTES*/
CREATE PROCEDURE ACTUALIZAR_PACIENTE
@ID_PACIENTE INT,
@NOMBRE VARCHAR(30)='%',
@EDAD INT,
@NSS VARCHAR(40)='%',
@DIRECCION VARCHAR(40)='%',
@TELEFONO INT,
@TELEFONO_CELULAR INT,
@EMAIL VARCHAR(100)='%',
@GENERO CHAR(1)
AS
UPDATE PACIENTES
SET NOMBRE = @NOMBRE,
    EDAD = @EDAD,
    NSS = @NSS,
    DIRECCION = @DIRECCION,
    TELEFONO = @TELEFONO,
    TELEFONO_CELULAR = @TELEFONO_CELULAR,
    EMAIL = @EMAIL,
    GENERO = @GENERO
WHERE ID_PACIENTE = @ID_PACIENTE;

/*ACTUALIZAR CONSULTA*/
CREATE PROCEDURE ACTUALIZAR_CONSULTA
@ID_CONSULTA INT,
@ID_MEDICOS INT,
@ID_PACIENTE INT,
@FECHA DATE='%',
@COMENTARIOS VARCHAR(100)='%'
AS
UPDATE CONSULTA
SET ID_MEDICOS = @ID_MEDICOS,
    ID_PACIENTE = @ID_PACIENTE,
    FECHA = @FECHA,
    COMENTARIOS = @COMENTARIOS
WHERE ID_CONSULTA = @ID_CONSULTA;

 

/*ACTUALIZAR RECETA*/
CREATE PROCEDURE ACTUALIZAR_RECETA
@ID_CONSULTA INT,
@MARCA VARCHAR(100)='%',
@COMENTARIOS VARCHAR(100)='%',
@FECHA_RECETA DATE ='%'
AS
UPDATE RECETA
SET MARCA = @MARCA,
    COMENTARIOS = @COMENTARIOS,
    FECHA_RECETA = @FECHA_RECETA
WHERE ID_CONSULTA = @ID_CONSULTA;

/*4.	Generar un procedimiento almacenado que invoque una serie de procedimientos para limpiar las tablas creadas, respetando las reglas de integridad definidas.*/
CREATE PROCEDURE LIMPIAR_TABLAS AS
DELETE FROM RECETA
DELETE FROM CONSULTA
DELETE FROM PACIENTES
DELETE FROM PERSONAL_MEDICO



/**5.	Mostrar el nombre y nº de la seguridad social de los pacientes que aún no han hecho ni una sola consulta.**/

SELECT NOMBRE, NSS 
FROM PACIENTES 
EXCEPT
SELECT NOMBRE, NSS 
FROM PACIENTES
INNER JOIN CONSULTA ON CONSULTA.ID_PACIENTE=PACIENTES.ID_PACIENTE

SELECT nombre, nss 
FROM PACIENTES
WHERE id_paciente NOT IN (SELECT id_paciente FROM CONSULTA)

/**6.	Mostrar el nombre de los profesionales Médicos que han tenido consulta con él paciente número 205**/
SELECT NOMBRE 
FROM PERSONAL_MEDICO
INNER JOIN CONSULTA ON CONSULTA.ID_MEDICOS=PERSONAL_MEDICO.ID_MEDICOS
WHERE ID_PACIENTE=1

/**8.	Pacientes (nombre e identificador) que han tenido consulta con el personal médico número 183 y número 230.**/
SELECT NOMBRE, CONSULTA.ID_PACIENTE FROM PACIENTES
INNER JOIN CONSULTA ON CONSULTA.ID_PACIENTE=PACIENTES.ID_PACIENTE
WHERE ID_MEDICOS=1 
INTERSECT
SELECT NOMBRE, CONSULTA.ID_PACIENTE FROM PACIENTES
INNER JOIN CONSULTA ON CONSULTA.ID_PACIENTE=PACIENTES.ID_PACIENTE
WHERE ID_MEDICOS=5


SELECT * FROM CONSULTA

/** 7.	Pacientes (nombre e identificador) que no han tenido consulta con ningún enfermero o enfermera.**/
SELECT PACIENTES.NOMBRE,CONSULTA.ID_PACIENTE FROM PACIENTES 
INNER JOIN CONSULTA ON CONSULTA.ID_PACIENTE = PACIENTES.ID_PACIENTE
INNER JOIN  PERSONAL_MEDICO ON PERSONAL_MEDICO.ID_MEDICOS = CONSULTA.ID_MEDICOS
WHERE PERSONAL_MEDICO.PROFESION NOT IN ('ENFERMERA','ENFERMERO')

/*9.	Pacientes (nombre e identificador) a los que nunca se les ha recetado nada.*/
SELECT NOMBRE, PACIENTES.ID_PACIENTE FROM PACIENTES
EXCEPT
select DISTINCT NOMBRE,PACIENTES.ID_PACIENTE 
from PACIENTES
INNER JOIN CONSULTA ON CONSULTA.ID_PACIENTE = PACIENTES.ID_PACIENTE
INNER JOIN RECETA ON RECETA.ID_CONSULTA = CONSULTA.ID_CONSULTA

SELECT NOMBRE, PACIENTES.ID_PACIENTE 
FROM PACIENTES
where PACIENTES.ID_PACIENTE not in (select ID_PACIENTE 
									from CONSULTA 
									inner join RECETA on RECETA.ID_CONSULTA = CONSULTA.ID_CONSULTA)

/* 10.	Pacientes que han ido a consulta todos los meses.*/
SELECT P.ID_PACIENTE, P.NOMBRE
FROM PACIENTES P
INNER JOIN CONSULTA C ON P.ID_PACIENTE = C.ID_PACIENTE
GROUP BY P.ID_PACIENTE, P.NOMBRE
HAVING COUNT(DISTINCT MONTH(C.FECHA)) = 12

/*11.	Pacientes que no han ido a consulta en todo el año 2005.*/
SELECT P.*,C.FECHA
FROM PACIENTES AS P 
inner JOIN CONSULTA AS C ON C.ID_PACIENTE = P.ID_PACIENTE
WHERE YEAR(FECHA) <> (2023)

/**12.	Pacientes menores de 36 años que asistieron a consulta y no se les receto nada.**/
select DISTINCT PACIENTES.ID_PACIENTE from PACIENTES
inner join CONSULTA on CONSULTA.ID_PACIENTE = PACIENTES.ID_PACIENTE
where PACIENTES.EDAD<36
AND PACIENTES.ID_PACIENTE NOT IN (SELECT ID_PACIENTE FROM CONSULTA INNER JOIN RECETA ON RECETA.ID_CONSULTA = CONSULTA.ID_CONSULTA)

/**13.	Edad promedio de los pacientes atendidos por Médicos Especialistas, en el año 2022.**/
SELECT AVG(PACIENTES.EDAD) as [Edad promedio]
FROM PACIENTES
INNER JOIN CONSULTA ON CONSULTA.ID_PACIENTE = PACIENTES.ID_PACIENTE
INNER JOIN PERSONAL_MEDICO ON PERSONAL_MEDICO.ID_MEDICOS = CONSULTA.ID_MEDICOS
WHERE PERSONAL_MEDICO.PROFESION='Medico Especialista'
and year(CONSULTA.FECHA)=2022

/*14.	Indicar el nombre del paciente de mayor edad atendido en el año 2022.*/
select PACIENTES.NOMBRE
from PACIENTES
INNER JOIN CONSULTA ON CONSULTA.ID_PACIENTE = PACIENTES.ID_PACIENTE
WHERE YEAR(CONSULTA.FECHA)=2022
AND PACIENTES.EDAD= (SELECT max(PACIENTES.EDAD) FROM PACIENTES)

/*15.	Crear una vista de la consulta de pacientes que no hayan sido atendido durante el año 2022 y que sean jubilados (según norma Argentina para que sea jubilado el hombre deberá ser mayor de 65 años y las mujeres mayores de 60 años)*/

CREATE VIEW VISTA1  
AS
SELECT PACIENTES.* FROM PACIENTES
INNER JOIN CONSULTA ON CONSULTA.ID_PACIENTE = PACIENTES.ID_PACIENTE
WHERE YEAR(CONSULTA.FECHA )<> 2022
AND ((PACIENTES.GENERO='M' AND PACIENTES.EDAD>65) OR (PACIENTES.GENERO='F' AND PACIENTES.EDAD>60))

/**16.	Indicar los pacientes que tienen de alguna letra F y que hayan sido atendido durante el 2020**/
SELECT * FROM PACIENTES
INNER JOIN CONSULTA ON CONSULTA.ID_PACIENTE = PACIENTES.ID_PACIENTE
WHERE NOMBRE LIKE '%F%'
AND YEAR(CONSULTA.FECHA)=2020

/*17.	Indicar los Médicos especialistas que contengan la letra S y que hayan atendido durante el 2021.*/
SELECT PM.NOMBRE, PM.PROFESION, C.FECHA
FROM PERSONAL_MEDICO AS PM
INNER JOIN CONSULTA AS C ON C.ID_MEDICOS = PM.ID_MEDICOS
WHERE PM.NOMBRE LIKE '%S%'
AND PM.PROFESION = 'MEDICO ESPECIALISTA'
AND YEAR(C.FECHA) = 2021 ;                    /*CAMBIE LOS VALORES PORQUE NO TENIA CON ESOS QUE ESTAN EN LA CONSIGNA*/

 

/* 18. Por cuestiones de optimización de la base de datos se necesita eliminar las consultas que se han realizado durante la década del 90, desarrollar un procedimiento almacenado que lo permita. */

CREATE PROCEDURE ELIMINAR_CONSULTAS_DECADA_DEL_90
AS
DELETE FROM CONSULTA                        /*CAMBIE LOS DATOS PORQUE NO TENGO NINGUNO EN LA DECADA DEL 90*/
WHERE YEAR(FECHA) BETWEEN 1990 AND 1999 ;


EXEC ELIMINAR_CONSULTAS_DECADA_DEL_90 ;


/* 19. Con el uso de procedimientos almacenados que reciban las fechas por parámetros, indicar aquellos pacientes con sus respectivos doctores que se han atendido entre el 01/01/2020 y el 31/08/2020 (fecha referencial). */

CREATE PROCEDURE OBTENER_ATENCIONES_PACIENTES_DOCTORES
@FECHA_INICIO DATE,
@FECHA_FIN DATE
AS
SELECT P.NOMBRE AS NombrePaciente, PM.NOMBRE AS NombreDoctor, C.FECHA
FROM PACIENTES P
INNER JOIN CONSULTA C ON P.ID_PACIENTE = C.ID_PACIENTE
INNER JOIN PERSONAL_MEDICO PM ON C.ID_MEDICOS = PM.ID_MEDICOS
WHERE C.FECHA BETWEEN @FECHA_INICIO AND @FECHA_FIN;

EXEC OBTENER_ATENCIONES_PACIENTES_DOCTORES '2023-01-01','2023-05-25' ;        /*CAMBIE LA FECHA PORQUE NO TENGO NINGUNO CON LOS VALORES DE LA COSNIGNA*/


/* 20. Indicar aquellos pacientes que se les ha recetado al menos una receta durante el año pasado. */

SELECT P.*
FROM PACIENTES AS P
INNER JOIN CONSULTA AS C ON C.ID_PACIENTE = P.ID_PACIENTE
INNER JOIN RECETA AS R ON R.ID_CONSULTA = C.ID_CONSULTA
WHERE YEAR(R.FECHA_RECETA) = 2022;

/* 21. Indicar aquellas enfermeras que se incorporaron durante el 2020. */

SELECT PM.*
FROM PERSONAL_MEDICO AS PM
WHERE YEAR(FECHA_IN) = 2020 ;            /*CAMBIE EL VALOR DE LA FECHA PORQUE NO TENGO NINGUNA EN 2020*/

 

/* 22. Desde una vista, Indicar médicos (tanto especialista como general) que se han incorporado entre el 2005 y el 2008. */

CREATE VIEW MEDICOS_INCOR_2005y2008
AS
SELECT PM.*
FROM PERSONAL_MEDICO AS PM 
WHERE PROFESION IN ('MEDICO GENERAL' , 'MEDICO ESPECIALISTA')
AND YEAR(FECHA_IN) BETWEEN 2005 AND 2008 ;


SELECT * FROM MEDICOS_INCOR_2005y2008 ;

 

/* 23. Indicar todos los pacientes que no se han atendido este año y que sus datos empiecen con la letra R. */

SELECT P.*
FROM PACIENTES AS P
WHERE ID_PACIENTE NOT IN (
    SELECT C.ID_PACIENTE
    FROM CONSULTA as C
    WHERE YEAR(FECHA) = 2023)
AND P.NOMBRE LIKE 'R%' ;


SELECT P.*, C.FECHA AS [FECHA QUE SE ATEDIO]
FROM PACIENTES AS P
INNER JOIN CONSULTA AS C ON C.ID_PACIENTE = P.ID_PACIENTE
WHERE YEAR(FECHA) <> 2023
AND P.NOMBRE LIKE 'R%' ;

SELECT * FROM PACIENTES
WHERE NOMBRE LIKE 'R%'
EXCEPT
SELECT PACIENTES.* 
FROM PACIENTES
INNER JOIN CONSULTA ON CONSULTA.ID_PACIENTE = PACIENTES.ID_PACIENTE
WHERE YEAR(CONSULTA.FECHA)=2023

 

/* 24. Indicar todos los pacientes que no se han atendido durante el 2020 o que sus datos contengan la letra s. */

SELECT P.NOMBRE
FROM PACIENTES AS P
INNER JOIN CONSULTA AS C ON C.ID_PACIENTE = P.ID_PACIENTE
WHERE (YEAR(C.FECHA) <> 2020 OR P.NOMBRE LIKE '%S%')

 

/* 25. Desde una vista mostrar todos los médicos especialistas que se han incorporado en el 2005 y que sus datos tengan al menos una vocal. */

CREATE VIEW VISTA_25
AS
SELECT NOMBRE
FROM PERSONAL_MEDICO
WHERE PROFESION = 'Medico Especialista'
AND  YEAR(FECHA_IN) = 2005                
AND NOMBRE LIKE '%[aeiouAEIOU]%'

SELECT * FROM VISTA_25

 

/* 26. Mostrar la cantidad de visitas que tuvo cada paciente. */

SELECT P.ID_PACIENTE, P.NOMBRE, COUNT(C.ID_CONSULTA) AS [CANTIDAD DE VISITAS]
FROM PACIENTES AS P
LEFT JOIN CONSULTA AS C ON C.ID_PACIENTE = P.ID_PACIENTE
GROUP BY P.ID_PACIENTE, P.NOMBRE;


/* 27. Desde una vista, mostrar la cantidad de consultas que tuvieron cada Médicos (Especialistas y General). */

CREATE VIEW VISTA_27
AS
SELECT PM.NOMBRE, COUNT(*) AS [CANT DE CONSULTAS QUE TUVIERON CADA MEDICO]
FROM CONSULTA AS C 
INNER JOIN PERSONAL_MEDICO AS PM ON PM.ID_MEDICOS = C.ID_MEDICOS
WHERE PM.PROFESION IN ('MEDICO ESPECIALISTA' , 'MEDICO GENERAL')
GROUP BY PM.NOMBRE ;

SELECT * FROM VISTA_27

 

/* 28. Mostrar la cantidad de veces que ha ido el paciente al consultorio. */

SELECT P.NOMBRE, COUNT(*) AS [CANT DE VECES QUE FUERON AL CONSULTORIO]
FROM PACIENTES AS P 
INNER JOIN CONSULTA AS C ON C.ID_PACIENTE = P.ID_PACIENTE
GROUP BY P.NOMBRE
ORDER BY P.NOMBRE ASC;

 

/* 29. Mostrar aquellos pacientes que han declarado el e-mail para que le llegue la receta a su casilla de correo electrónico. */

SELECT *
FROM PACIENTES
WHERE EMAIL IS NOT NULL ;


 

/* 30. Finalmente construya 4 tablas con por lo menos 5 atributos referentes al contexto y construir el modelo señalado en SQL, creando los dominios correctos para cada atributo y luego: 
    a. Crear un procedimiento almacenado que permita la carga por parámetros de cada uno de los objetos de datos definidos (médicos, pacientes, consultas, recetas, entre otros)
    b. Insertar 10 filas para cada tabla con datos de prueba desde dichos procedimientos.
    c. Crear todos los procedimientos almacenados necesarios que permitan actualizar los datos de médicos, pacientes, consultas y recetas según los parámetros que reciban, respetando las reglas de integridad definidas.
    d. Generar un procedimiento almacenado que invoque una serie de procedimientos para limpiar las tablas creadas, respetando las reglas de integridad definidas.
    e. Desarrollar 7 consultas en vistas con el modelo definido que abarquen el uso de las 8 tablas. */



CREATE TABLE HOSPITALES (
ID_HOSPITAL INT PRIMARY KEY NOT NULL,
H_NOMBRE VARCHAR (20) NOT NULL,
H_DIRECCION VARCHAR (20)NOT NULL,
H_CIUDAD VARCHAR (20)NOT NULL,
TELEFENO VARCHAR(15)NOT NULL
);

CREATE TABLE COBERTURA(
ID_COBERTURA INT NOT NULL PRIMARY KEY,
ID_MEDICOS INT NOT NULL FOREIGN KEY(ID_MEDICOS) REFERENCES PERSONAL_MEDICO(ID_MEDICOS),
ID_HOSPITAL INT NOT NULL FOREIGN KEY(ID_HOSPITAL) REFERENCES HOSPITALES(ID_HOSPITAL), 
SALARIO FLOAT NOT NULL CHECK(SALARIO > 0),
FECHA_IN DATE NOT NULL)


CREATE TABLE FACTURA (
ID_FACTURA INT PRIMARY KEY NOT NULL,
ID_CONSULTA INT NOT NULL,
FECHA DATE NOT NULL,
TOTAL INT NOT NULL,
ESTADO VARCHAR (100) CHECK (ESTADO IN ('PAGADA','PENDIENTE','ANULADA')) NOT NULL,
CONSTRAINT FK_ID_CONSULTA_HOSPITALES FOREIGN KEY (ID_CONSULTA) REFERENCES CONSULTA (ID_CONSULTA) 
);

 

CREATE TABLE SALA_HOSPITAL (
ID_HOSPITAL INT NOT NULL,
SALA_COD INT PRIMARY KEY NOT NULL,
NOMBRE VARCHAR(20) NOT NULL, 
NUM_CAMA INT NOT NULL,
CONSTRAINT FK_ID_HOSPITAL_SALA_HOSPITAL FOREIGN KEY (ID_HOSPITAL)REFERENCES HOSPITALES (ID_HOSPITAL)
);

CREATE PROCEDURE RELLENAR_HOSPITALES
@ID_HOSPITAL INT,
@H_NOMBRE VARCHAR (20),
@H_DIRECCION VARCHAR (20),
@H_CIUDAD VARCHAR (20),
@TELEFONO VARCHAR(15)
AS
INSERT INTO HOSPITALES VALUES (@ID_HOSPITAL,@H_NOMBRE,@H_DIRECCION,@H_CIUDAD,@TELEFONO) 
EXEC RELLENAR_HOSPITALES 1,'ITALIANO','MAIPU 1956','BUENOS AIRES','11405786'
EXEC RELLENAR_HOSPITALES 2,'FRANCES','VENEZUELA 2045','AMSTERDAM','11405452'
EXEC RELLENAR_HOSPITALES 3,'MILITAR','CASEROS 867','PARIS','65405786'
EXEC RELLENAR_HOSPITALES 4,'BRITANICO','ROMA 1890','TOKIO','114132786'
EXEC RELLENAR_HOSPITALES 5,'ALEMAN','LAPRIDA 4756','MADRID','135452786'
EXEC RELLENAR_HOSPITALES 6,'LAS LOMAS','LIBERTADOR 2478','BARCELONA','114245216'
EXEC RELLENAR_HOSPITALES 7,'SAN LUCAS','MADERO 1950','RIO DE JANEIRO','17855786' 
EXEC RELLENAR_HOSPITALES 8,'TRINIDAD','BELZU 456','NUEVA YORK','11403656'
EXEC RELLENAR_HOSPITALES 9,'MAIPU','MITRE 2035','LOS ANGELES', '15405786'
EXEC RELLENAR_HOSPITALES 10,'FLENI','MENDOZA 1578','BERLIN','114035724' 

CREATE PROCEDURE UPDATE_HOSPITALES
@ID_HOSPITAL INT,
@H_NOMBRE VARCHAR (20),
@H_DIRECCION VARCHAR (20),
@H_CIUDAD VARCHAR (20),
@TELEFONO VARCHAR(15)
AS
UPDATE HOSPITALES SET H_NOMBRE=@H_NOMBRE, H_DIRECCION=@H_DIRECCION, H_CIUDAD=@H_CIUDAD , TELEFONO=@TELEFONO WHERE ID_HOSPITAL=@ID_HOSPITAL

CREATE PROCEDURE RELLENAR_COBERTURA 
@ID_COBERTURA INT, 
@ID_HOSPITAL INT, 
@ID_MEDICOS INT, 
@SALARIO FLOAT,
@FECHA_IN DATE AS 
INSERT INTO COBERTURA VALUES ( @ID_COBERTURA,@ID_HOSPITAL,@ID_MEDICOS,@SALARIO,@FECHA_IN)

EXEC RELLENAR_COBERTURA 1,1,1,100,'2002-01-01'
EXEC RELLENAR_COBERTURA 2,2,2,200,'2003-01-01'
EXEC RELLENAR_COBERTURA 3,3,3,300,'2004-01-01'
EXEC RELLENAR_COBERTURA 4,4,4,400,'2005-01-01'
EXEC RELLENAR_COBERTURA 5,5,5,500,'2006-01-01'
EXEC RELLENAR_COBERTURA 6,6,6,600,'2007-01-01'
EXEC RELLENAR_COBERTURA 7,7,7,700,'2008-01-01'
EXEC RELLENAR_COBERTURA 8,8,8,800,'2009-01-01'
EXEC RELLENAR_COBERTURA 9,9,9,900,'2010-01-01'
EXEC RELLENAR_COBERTURA 10,10,10,1000,'2011-01-01'

CREATE PROCEDURE UPDATE_COBERTURA
@ID_COBERTURA INT, 
@ID_HOSPITAL INT, 
@ID_MEDICOS INT, 
@SALARIO FLOAT,
@FECHA_IN DATE = '%'
AS
UPDATE COBERTURA
SET ID_HOSPITAL = @ID_HOSPITAL,
    ID_MEDICOS = @ID_MEDICOS,
    SALARIO = @SALARIO,
    FECHA_IN = @FECHA_IN
WHERE ID_COBERTURA = @ID_COBERTURA 

create procedure RELLENAR_SALA_HOSPITAL
@id_hospital int,
@sala_cod int,
@nombre varchar(20),
@num_cama int
as
insert into SALA_HOSPITAL values(@id_hospital,@sala_cod,@nombre,@num_cama)
exec RELLENAR_SALA_HOSPITAL 1,1,'Sala rosa',500
exec RELLENAR_SALA_HOSPITAL 2,2,'Sala roja',140
exec RELLENAR_SALA_HOSPITAL 3,3,'Sala amarilla',50
exec RELLENAR_SALA_HOSPITAL 4,4,'Sala violeta',10
exec RELLENAR_SALA_HOSPITAL 5,5,'Sala azul',60
exec RELLENAR_SALA_HOSPITAL 6,6,'Sala gris',22
exec RELLENAR_SALA_HOSPITAL 7,7,'Sala negra',48
exec RELLENAR_SALA_HOSPITAL 8,8,'Sala celeste',100
exec RELLENAR_SALA_HOSPITAL 9,9,'Sala naranja',100
exec RELLENAR_SALA_HOSPITAL 10,10,'Sala verde',230

CREATE PROCEDURE RELLENAR_FACTURA1
@ID_FACTURA INT,
@ID_CONSULTA INT,
@FECHA DATE,
@TOTAL INT,
@ESTADO VARCHAR (100)
AS
INSERT INTO FACTURA VALUES(@ID_FACTURA,@ID_CONSULTA,@FECHA,@TOTAL,@ESTADO)
EXEC RELLENAR_FACTURA1 1,12,'2015-10-14',12000,'PAGADA'
EXEC RELLENAR_FACTURA1 2,7,'2018-08-21',5000,'PENDIENTE'
EXEC RELLENAR_FACTURA1 3,5,'2020-09-24',100,'PENDIENTE'
EXEC RELLENAR_FACTURA1 4,6,'2023-10-03',7800,'PAGADA'
EXEC RELLENAR_FACTURA1 5,8,'2022-07-05',360,'ANULADA'
EXEC RELLENAR_FACTURA1 6,4,'2021-01-01',1542,'PENDIENTE'
EXEC RELLENAR_FACTURA1 7,9,'2010-02-17',10000,'PAGADA'
EXEC RELLENAR_FACTURA1 8,2,'2008-12-15',30000,'ANULADA'
EXEC RELLENAR_FACTURA1 9,10,'2014-06-30',5000,'PENDIENTE'
EXEC RELLENAR_FACTURA1 10,3,'2013-09-13',8450,'ANULADA' 

CREATE PROCEDURE UPDATE_FACTURA
@ID_FACTURA INT,
@ID_CONSULTA INT,
@FECHA DATE,
@TOTAL INT,
@ESTADO VARCHAR (100)
AS
UPDATE FACTURA SET ID_CONSULTA = @ID_CONSULTA, FECHA=@FECHA, TOTAL=@TOTAL, ESTADO=@ESTADO WHERE ID_FACTURA = @ID_FACTURA

CREATE PROCEDURE BORRAR_TABLAS AS
DELETE FROM SALA_HOSPITAL
DELETE FROM FACTURA 
DELETE FROM COBERTURA
DELETE FROM HOSPITALES

EXEC BORRAR_TABLAS

/*el precio promedio de las consultas de los medicos del hospital britanico*/
create view precio_promedio_consultas_hospital as
select avg(FACTURA.TOTAL) AS [PRECIO PROMEDIO CONSULTAS DE HOSPITAL BRITANICO]
from FACTURA
inner join CONSULTA on CONSULTA.ID_CONSULTA = FACTURA.ID_CONSULTA
inner join COBERTURA on COBERTURA.ID_MEDICOS = CONSULTA.ID_MEDICOS
inner join HOSPITALES on HOSPITALES.ID_HOSPITAL = COBERTURA.ID_HOSPITAL
where HOSPITALES.H_NOMBRE = 'BRITANICO'

select * from precio_promedio_consultas_hospital

/*El precio promedio de las consultas cuyo estado de la factura este 'Pendiente'*/

CREATE VIEW VISTA_ESTADO_PENDIENTE
AS
SELECT AVG(F.TOTAL) AS [Precio promedio de las consultas cuyo estado de la factura este 'Pendiente']
FROM FACTURA AS F
WHERE F.ESTADO = 'PENDIENTE' 

SELECT * FROM VISTA_ESTADO_PENDIENTE

/*CANTIDAD DE CONSULTAS EN ESTADO PAGADO*/
CREATE VIEW CANT_CONSULTAS_PAGADAS AS 
SELECT COUNT(*) AS [CANTIDAD DE CONSULTAS PAGADAS]
FROM CONSULTA
INNER JOIN FACTURA ON FACTURA.ID_CONSULTA =  CONSULTA.ID_CONSULTA
WHERE FACTURA.ESTADO = 'PAGADA'

SELECT * FROM CANT_CONSULTAS_PAGADAS

/*Cobertura Medica con la que atienda los medios de profesion 'Medico General*/

CREATE VIEW VISTA_MEDICO_GENERAL
AS
SELECT C.ID_COBERTURA, PM.PROFESION
FROM COBERTURA AS C
INNER JOIN PERSONAL_MEDICO AS PM ON PM.ID_MEDICOS = C.ID_MEDICOS
WHERE PM.PROFESION = 'MEDICO GENERAL' ;

SELECT * FROM VISTA_MEDICO_GENERAL

/* TOTAL A PAGAR DE LAS CONSULTAS REALIZADAS POR LOS PACIENTES QUE SE ATENDRIERON EN EL 2023*/
CREATE VIEW TOTAL_PAGO_CONSULTAS_2023 AS 
SELECT SUM(FACTURA.TOTAL) AS [TOTAL PAGOS X CONSULTAS EN 2023]
FROM FACTURA 
INNER JOIN CONSULTA ON CONSULTA.ID_CONSULTA = FACTURA.ID_CONSULTA
WHERE YEAR(CONSULTA.FECHA)=2023


SELECT * FROM TOTAL_PAGO_CONSULTAS_2023

/* CODIGO DE SALA QUE CONTENGA MAS DE 50 CAMAS Y CUYO HOSPITAL CONTENGA LA LETRA E*/
CREATE VIEW CODIGO_SALAS_MAS50 AS 
SELECT SALA_HOSPITAL.SALA_COD
FROM SALA_HOSPITAL
INNER JOIN HOSPITALES ON HOSPITALES.ID_HOSPITAL = SALA_HOSPITAL.ID_HOSPITAL
WHERE SALA_HOSPITAL.NUM_CAMA > 50
AND HOSPITALES.H_NOMBRE LIKE '%E%'

SELECT * FROM CODIGO_SALAS_MAS50

/*NOMBRE DEL MEDICO CON MAYOR SALARIO*/
CREATE VIEW MEDICO_MAYOR_SALARIO AS
SELECT PERSONAL_MEDICO.NOMBRE 
FROM PERSONAL_MEDICO
INNER JOIN COBERTURA ON COBERTURA.ID_MEDICOS = PERSONAL_MEDICO.ID_MEDICOS
WHERE SALARIO=(SELECT MAX(SALARIO) FROM COBERTURA)

SELECT * FROM MEDICO_MAYOR_SALARIO